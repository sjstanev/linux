# Vim Shortkeys
# Vim Shortkeys
![alt text](image.png)
## Table of Contents
## TTableable of Contents
## Learning The Basic
![alt text](image.png)
## Table of Contents
## TTableable of Contents
## Learning The Basii
## Learning The Basic


- [Learn to # Learning The Basic

- [Learn to moveiss](#learn-to-moves)
- [First set the ruler](#first-set-the-ruler)
- [Fix Your Deletion](#fix-your-deletion)
- [Control Your Insertions](#control-your-insertions)
- [Search smarter](#search-smarter)
--100005-
## Learn to moves the end of the line
Most vi users know the basic cursor motions of Normal mode:
```
      k
    h   l
      j
```
Or four arrows
The are also higher-level motion commands and operators
For words, lines, and other "text-objects"
<ISBN>Auhtor</ISBN>
<ISBN>name</ISBN>
<ISBN>surname</ISBN>
<ISBN>Auhtor2</ISBN>
## Word motions
 * TO moviesS FORWARD TO THE START OF THE NEXT WORD: `W`
 * TO moviesS FORWWARDS TO THE START OF THE PREWORD: `W`600
 * TO moviesS BACKWARDS TO THE START OF THE PREVIOUS WORD: `B`
 * To movies forward to the <ins>end</ins> of the next word: `e`
 * To movies backforward to the <ins>end</ins> of the previous word: `ge`

"Words" are considered anything that is delimited by non-identifier characters. All the motions have uppercase versions that use <ins>whitespace</ins> as the word delimiter instead.

## Line and paragraph motions
 * TO MOVES TO THE START OF THE CURRENT LINE: `0`
 * To move to the start of the first word of the current line: `^`
 * TO MOVES TO THE END OF THE CURRENT LINE: `$`
 * To move to the start of the next line: `<CR>`
 * TO MOVES TO THE START OF THE PREVIOUS LINE: `-`

 * To move to start of the current paragraph: `{`
 * TO MOVES TO THE END OF THE CURRENT PARAGRAPH: `}`

A paragraph is delimited by empty lines (i.e. <ins>not</ins> black lines)

## Miscellaneous motions
 * To move to the top of the buffer: `gg`
 * TO move TO THE END OF THE BUFFER: `G`
 * TO move TO THE OF THE BUFFER: `G`
 * to move line <ins>n</ins>: `<n>g` or `<n>gg`
 * To move to the point <ins>P</ins> percent through the buffer: `<P>%`

## Matching delimiters
 * To move the matching bracket of a {...}, (...), or [...] pair: `%`

By default , Vim only matches {...}, (...), and [...], but you can extend that to whatever pairs you like:
```
set matchpairs+=<:>, <<:>>
```
Even to "pairs" that aren't normally considered pairs:
```
set matchpairs+==:;
```
## Repeated motions
Tedious to have to type `lllll` to move five chars right:
 * instead can type: `5l`
 * likewise, up three lines: `3k`
 * likewise, ahead four paragraphs: `4}`

## First set the ruler
To find out where you are in a file: `<CTRL-G>`
To always know where you are, set the ruler, in yout `.vimrc` file:
```
set ruler
```

##  Fix Your Deletion
For example:
```
:set backspace=start    "Can delete back past start of edit

:set backspace=indent   "Can delete back past autoindenting

:set backspace=eol      "Can delete back to the previous line
```
You may want all three:
```
:set backspace=start,indent,eol
```

## Control Your Insertions
In *Insert* or *Replace* mode, most characters you type simple insert that character, but not all. Many of control characters have special insertion behaviours.

 * `CTRL-y` duplicates what's in the same column on the preceding line
 * `CTRL-e` duplicates what's in the same column on the following line
 * `CTRL-a` inserts again whatever the most-recent inserted text was
 * `CTRL-r=` evaluates expression and inserts the result

 * `CTRL-t` insert a tab at the start of the line
    (without moving the insertion point)
 * `CTRL-d` delete a tab at the start of the line
    (without moving the insertion point)
 * `CTRL-v` insert the next character verbatim
 * `CTRL-w` deletes the word preceding the cursor
 * `CTRL-o` takes you back to Normal mode for one command, which is handy, for example, to clean the rest of the line: `CTRL-oD`

## Search smarter
Regexes used are <ins>sed</ins>-ish, but Vim extends them considerably, comparable in power to Perl, but numerous differences in syntax.
Single most useful thing to remember... nearly every *metasyntactic* need a backslash

### Commonest mistakes:
`\d+` or `\foo|bar `must become:

&ensp; \d<span style="color:yellow">\\</span>+

&ensp; \foo<span style="color:yellow">\\</span>|bar

Alternatively, you can prefix your regexes with \v:

&ensp; <span style="color:yellow">\v</span>\d+

&ensp; <span style="color:yellow">\v</span>foo|bar

### You can even automate that:
```
nnoremap / /\v
```

### Another very useful metasyntactics is `\&`

The "and" equivalent of `\|`'s "or"

For example, find line containing "Java" and "line":
```
/.*Java\&.*line
```

### \\< and \\> match only at start/end of word. 
For example:
```
/\<for\>

... mathches "for", but not "forture" nor "wherefor" nor "enforce"
```

### Searching for existing word
If the word you want to search for is already under your cursor... just type `*` to find the next instance or `#` to find the previous

### Case (in)sensitivity
Normally Vim searches are case-sensitive. If you would prefer case insensitive set the following option:
```
:set ignorecase
```
Better still, if you'd like "partial sensitivity", set this option as well:
```
:set smartcase
```
"Smartcase" overrides the "ignorecase" behaviour whenever your pattern includes any uppercase letters

Even with these options set you can still be specific when you need to be. Use the `\c` specifier within the pattern. Everything after it within the pattern will match case-insensitively, no matter what
Even with these os`\C`  set you 
Like, there's `\C` to undconditionally turn case sensitivity on.
